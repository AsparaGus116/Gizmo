
// Generated from romASMLexer.g4 by ANTLR 4.13.2


#include "romASMLexer.h"


using namespace antlr4;

using namespace romASM;


using namespace antlr4;

namespace {

struct RomASMLexerStaticData final {
  RomASMLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  RomASMLexerStaticData(const RomASMLexerStaticData&) = delete;
  RomASMLexerStaticData(RomASMLexerStaticData&&) = delete;
  RomASMLexerStaticData& operator=(const RomASMLexerStaticData&) = delete;
  RomASMLexerStaticData& operator=(RomASMLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag romasmlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<RomASMLexerStaticData> romasmlexerLexerStaticData = nullptr;

void romasmlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (romasmlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(romasmlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<RomASMLexerStaticData>(
    std::vector<std::string>{
      "MOV", "STR", "LDA", "OR", "INV", "AND", "XOR", "ADD", "SUB", "NOT", 
      "SHR", "SHL", "PUSH", "CALL", "POP", "RET", "JMP", "JEZ", "JNZ", "JGZ", 
      "JLZ", "COMMA", "LABELID", "LABEL", "COMMENT", "IMM", "HEX", "REG", 
      "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "','"
    },
    std::vector<std::string>{
      "", "MOV", "STR", "LDA", "OR", "INV", "AND", "XOR", "ADD", "SUB", 
      "NOT", "SHR", "SHL", "PUSH", "CALL", "POP", "RET", "JMP", "JEZ", "JNZ", 
      "JGZ", "JLZ", "COMMA", "LABELID", "LABEL", "COMMENT", "IMM", "HEX", 
      "REG", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,29,294,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,1,0,1,0,1,0,1,0,1,0,1,0,3,0,66,8,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,74,
  	8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,82,8,2,1,3,1,3,1,3,1,3,3,3,88,8,3,1,4,
  	1,4,1,4,1,4,1,4,1,4,3,4,96,8,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,104,8,5,1,
  	6,1,6,1,6,1,6,1,6,1,6,3,6,112,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,120,8,7,
  	1,8,1,8,1,8,1,8,1,8,1,8,3,8,128,8,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,136,8,
  	9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,144,8,10,1,11,1,11,1,11,1,11,1,11,
  	1,11,3,11,152,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,162,8,
  	12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,172,8,13,1,14,1,14,1,
  	14,1,14,1,14,1,14,3,14,180,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,188,
  	8,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,196,8,16,1,17,1,17,1,17,1,17,
  	1,17,1,17,3,17,204,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,212,8,18,1,
  	19,1,19,1,19,1,19,1,19,1,19,3,19,220,8,19,1,20,1,20,1,20,1,20,1,20,1,
  	20,3,20,228,8,20,1,21,1,21,1,22,1,22,1,22,5,22,235,8,22,10,22,12,22,238,
  	9,22,3,22,240,8,22,1,22,1,22,5,22,244,8,22,10,22,12,22,247,9,22,3,22,
  	249,8,22,1,23,1,23,1,23,1,24,1,24,1,24,3,24,257,8,24,1,24,5,24,260,8,
  	24,10,24,12,24,263,9,24,1,24,3,24,266,8,24,1,24,1,24,1,25,4,25,271,8,
  	25,11,25,12,25,272,1,26,1,26,1,26,1,26,4,26,279,8,26,11,26,12,26,280,
  	1,27,1,27,1,27,3,27,286,8,27,1,28,4,28,289,8,28,11,28,12,28,290,1,28,
  	1,28,1,261,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
  	12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
  	47,24,49,25,51,26,53,27,55,28,57,29,1,0,9,2,0,82,82,114,114,3,0,65,90,
  	95,95,97,122,4,0,48,57,65,90,95,95,97,122,5,0,65,81,83,90,95,95,97,113,
  	115,122,6,0,48,57,65,81,83,90,95,95,97,113,115,122,1,1,10,10,1,0,48,57,
  	3,0,48,57,65,70,97,102,3,0,9,10,12,13,32,32,324,0,1,1,0,0,0,0,3,1,0,0,
  	0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
  	1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
  	0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
  	0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
  	1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
  	0,0,1,65,1,0,0,0,3,73,1,0,0,0,5,81,1,0,0,0,7,87,1,0,0,0,9,95,1,0,0,0,
  	11,103,1,0,0,0,13,111,1,0,0,0,15,119,1,0,0,0,17,127,1,0,0,0,19,135,1,
  	0,0,0,21,143,1,0,0,0,23,151,1,0,0,0,25,161,1,0,0,0,27,171,1,0,0,0,29,
  	179,1,0,0,0,31,187,1,0,0,0,33,195,1,0,0,0,35,203,1,0,0,0,37,211,1,0,0,
  	0,39,219,1,0,0,0,41,227,1,0,0,0,43,229,1,0,0,0,45,248,1,0,0,0,47,250,
  	1,0,0,0,49,256,1,0,0,0,51,270,1,0,0,0,53,274,1,0,0,0,55,282,1,0,0,0,57,
  	288,1,0,0,0,59,60,5,109,0,0,60,61,5,111,0,0,61,66,5,118,0,0,62,63,5,77,
  	0,0,63,64,5,79,0,0,64,66,5,86,0,0,65,59,1,0,0,0,65,62,1,0,0,0,66,2,1,
  	0,0,0,67,68,5,115,0,0,68,69,5,116,0,0,69,74,5,114,0,0,70,71,5,83,0,0,
  	71,72,5,84,0,0,72,74,5,82,0,0,73,67,1,0,0,0,73,70,1,0,0,0,74,4,1,0,0,
  	0,75,76,5,108,0,0,76,77,5,100,0,0,77,82,5,97,0,0,78,79,5,76,0,0,79,80,
  	5,68,0,0,80,82,5,65,0,0,81,75,1,0,0,0,81,78,1,0,0,0,82,6,1,0,0,0,83,84,
  	5,111,0,0,84,88,5,114,0,0,85,86,5,79,0,0,86,88,5,82,0,0,87,83,1,0,0,0,
  	87,85,1,0,0,0,88,8,1,0,0,0,89,90,5,105,0,0,90,91,5,110,0,0,91,96,5,118,
  	0,0,92,93,5,73,0,0,93,94,5,78,0,0,94,96,5,86,0,0,95,89,1,0,0,0,95,92,
  	1,0,0,0,96,10,1,0,0,0,97,98,5,97,0,0,98,99,5,110,0,0,99,104,5,100,0,0,
  	100,101,5,65,0,0,101,102,5,78,0,0,102,104,5,68,0,0,103,97,1,0,0,0,103,
  	100,1,0,0,0,104,12,1,0,0,0,105,106,5,120,0,0,106,107,5,111,0,0,107,112,
  	5,114,0,0,108,109,5,88,0,0,109,110,5,79,0,0,110,112,5,82,0,0,111,105,
  	1,0,0,0,111,108,1,0,0,0,112,14,1,0,0,0,113,114,5,97,0,0,114,115,5,100,
  	0,0,115,120,5,100,0,0,116,117,5,65,0,0,117,118,5,68,0,0,118,120,5,68,
  	0,0,119,113,1,0,0,0,119,116,1,0,0,0,120,16,1,0,0,0,121,122,5,115,0,0,
  	122,123,5,117,0,0,123,128,5,98,0,0,124,125,5,83,0,0,125,126,5,85,0,0,
  	126,128,5,66,0,0,127,121,1,0,0,0,127,124,1,0,0,0,128,18,1,0,0,0,129,130,
  	5,110,0,0,130,131,5,111,0,0,131,136,5,116,0,0,132,133,5,78,0,0,133,134,
  	5,79,0,0,134,136,5,84,0,0,135,129,1,0,0,0,135,132,1,0,0,0,136,20,1,0,
  	0,0,137,138,5,115,0,0,138,139,5,104,0,0,139,144,5,114,0,0,140,141,5,83,
  	0,0,141,142,5,72,0,0,142,144,5,82,0,0,143,137,1,0,0,0,143,140,1,0,0,0,
  	144,22,1,0,0,0,145,146,5,115,0,0,146,147,5,104,0,0,147,152,5,108,0,0,
  	148,149,5,83,0,0,149,150,5,72,0,0,150,152,5,76,0,0,151,145,1,0,0,0,151,
  	148,1,0,0,0,152,24,1,0,0,0,153,154,5,112,0,0,154,155,5,117,0,0,155,156,
  	5,115,0,0,156,162,5,104,0,0,157,158,5,80,0,0,158,159,5,85,0,0,159,160,
  	5,83,0,0,160,162,5,72,0,0,161,153,1,0,0,0,161,157,1,0,0,0,162,26,1,0,
  	0,0,163,164,5,99,0,0,164,165,5,97,0,0,165,166,5,108,0,0,166,172,5,108,
  	0,0,167,168,5,67,0,0,168,169,5,65,0,0,169,170,5,76,0,0,170,172,5,76,0,
  	0,171,163,1,0,0,0,171,167,1,0,0,0,172,28,1,0,0,0,173,174,5,112,0,0,174,
  	175,5,111,0,0,175,180,5,112,0,0,176,177,5,80,0,0,177,178,5,79,0,0,178,
  	180,5,80,0,0,179,173,1,0,0,0,179,176,1,0,0,0,180,30,1,0,0,0,181,182,5,
  	114,0,0,182,183,5,101,0,0,183,188,5,116,0,0,184,185,5,82,0,0,185,186,
  	5,69,0,0,186,188,5,84,0,0,187,181,1,0,0,0,187,184,1,0,0,0,188,32,1,0,
  	0,0,189,190,5,106,0,0,190,191,5,109,0,0,191,196,5,112,0,0,192,193,5,74,
  	0,0,193,194,5,77,0,0,194,196,5,80,0,0,195,189,1,0,0,0,195,192,1,0,0,0,
  	196,34,1,0,0,0,197,198,5,106,0,0,198,199,5,101,0,0,199,204,5,122,0,0,
  	200,201,5,74,0,0,201,202,5,69,0,0,202,204,5,90,0,0,203,197,1,0,0,0,203,
  	200,1,0,0,0,204,36,1,0,0,0,205,206,5,106,0,0,206,207,5,110,0,0,207,212,
  	5,122,0,0,208,209,5,74,0,0,209,210,5,78,0,0,210,212,5,90,0,0,211,205,
  	1,0,0,0,211,208,1,0,0,0,212,38,1,0,0,0,213,214,5,106,0,0,214,215,5,103,
  	0,0,215,220,5,122,0,0,216,217,5,74,0,0,217,218,5,71,0,0,218,220,5,90,
  	0,0,219,213,1,0,0,0,219,216,1,0,0,0,220,40,1,0,0,0,221,222,5,106,0,0,
  	222,223,5,108,0,0,223,228,5,122,0,0,224,225,5,74,0,0,225,226,5,76,0,0,
  	226,228,5,90,0,0,227,221,1,0,0,0,227,224,1,0,0,0,228,42,1,0,0,0,229,230,
  	5,44,0,0,230,44,1,0,0,0,231,239,7,0,0,0,232,236,7,1,0,0,233,235,7,2,0,
  	0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,
  	240,1,0,0,0,238,236,1,0,0,0,239,232,1,0,0,0,239,240,1,0,0,0,240,249,1,
  	0,0,0,241,245,7,3,0,0,242,244,7,4,0,0,243,242,1,0,0,0,244,247,1,0,0,0,
  	245,243,1,0,0,0,245,246,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,248,231,
  	1,0,0,0,248,241,1,0,0,0,249,46,1,0,0,0,250,251,3,45,22,0,251,252,5,58,
  	0,0,252,48,1,0,0,0,253,254,5,47,0,0,254,257,5,47,0,0,255,257,5,35,0,0,
  	256,253,1,0,0,0,256,255,1,0,0,0,257,261,1,0,0,0,258,260,9,0,0,0,259,258,
  	1,0,0,0,260,263,1,0,0,0,261,262,1,0,0,0,261,259,1,0,0,0,262,265,1,0,0,
  	0,263,261,1,0,0,0,264,266,7,5,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,
  	268,6,24,0,0,268,50,1,0,0,0,269,271,7,6,0,0,270,269,1,0,0,0,271,272,1,
  	0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,52,1,0,0,0,274,275,5,48,0,0,
  	275,276,5,120,0,0,276,278,1,0,0,0,277,279,7,7,0,0,278,277,1,0,0,0,279,
  	280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,54,1,0,0,0,282,283,7,
  	0,0,0,283,285,7,6,0,0,284,286,7,6,0,0,285,284,1,0,0,0,285,286,1,0,0,0,
  	286,56,1,0,0,0,287,289,7,8,0,0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,
  	1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,293,6,28,0,0,293,58,1,0,0,
  	0,33,0,65,73,81,87,95,103,111,119,127,135,143,151,161,171,179,187,195,
  	203,211,219,227,236,239,245,248,256,261,265,272,280,285,290,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  romasmlexerLexerStaticData = std::move(staticData);
}

}

romASMLexer::romASMLexer(CharStream *input) : Lexer(input) {
  romASMLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *romasmlexerLexerStaticData->atn, romasmlexerLexerStaticData->decisionToDFA, romasmlexerLexerStaticData->sharedContextCache);
}

romASMLexer::~romASMLexer() {
  delete _interpreter;
}

std::string romASMLexer::getGrammarFileName() const {
  return "romASMLexer.g4";
}

const std::vector<std::string>& romASMLexer::getRuleNames() const {
  return romasmlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& romASMLexer::getChannelNames() const {
  return romasmlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& romASMLexer::getModeNames() const {
  return romasmlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& romASMLexer::getVocabulary() const {
  return romasmlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView romASMLexer::getSerializedATN() const {
  return romasmlexerLexerStaticData->serializedATN;
}

const atn::ATN& romASMLexer::getATN() const {
  return *romasmlexerLexerStaticData->atn;
}




void romASMLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  romasmlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(romasmlexerLexerOnceFlag, romasmlexerLexerInitialize);
#endif
}
